<project basedir="." default="all">

  <target name="setup">
    <property name="hadoop.home" value="/opt/hadoop-2.5.1/share/hadoop" />
    <property name="hadoop.version" value="2.5.1" />
    <property name="hadoop.classpath" value="${hadoop.home}/common/hadoop-common-2.5.1.jar:${hadoop.home}/mapreduce/hadoop-mapreduce-client-core-2.5.1.jar:${hadoop.home}/common/lib/commons-cli-1.2.jar:${hadoop.home}/hdfs/hadoop-hdfs-2.5.1.jar:${hadoop.home}/common/hadoop-nfs-2.5.1.jar" />
    <property name="metadata.jar" value="3rdparty/metadata-extractor-2.6.4.jar" />

    <!-- jars for test suite -->
    <property name="junit.jar" value="3rdparty/junit-4.12.jar" />
    <property name="hamcrest.jar" value="3rdparty/hamcrest-core-1.3.jar" />
    <property name="commons.logging.jar" value="3rdparty/commons-logging-1.1.2.jar" />
    <property name="guava.jar" value="3rdparty/guava-18.0.jar" />
    <property name="commons.collections.jar" value="3rdparty/commons-collections-3.2.1.jar" />
    <property name="commons.lang.jar" value="3rdparty/commons-lang-2.6.jar" />
    <property name="commons.configuration.jar" value="3rdparty/commons-configuration-1.10.jar" />
    <property name="hadoop.auth.jar" value="3rdparty/hadoop-auth-2.5.1.jar" />
    <property name="slf4j.api.jar" value="3rdparty/slf4j-api-1.7.10.jar" />
    <property name="log4j.jar" value="3rdparty/log4j-1.2.17.jar" />
    <property name="avro.jar" value="3rdparty/avro-1.7.7.jar" />
  </target>

  <target name="test_settings">
    <fail unless="hadoop.home" message="The property hadoop.home was not specified. You must specify the home directory for Hadoop in the build.xml file." />
    <fail unless="hadoop.version" message="The property hadoop.version was not specified. You must specify version of Hadoop you are using in the build.xml file." />
  </target>

  <target name="compile" depends="setup, test_settings">
    <mkdir dir="bin" />
    <!-- Compile -->
      <javac nowarn="on" includeantruntime="no" srcdir="${srcdir}" destdir="./bin" classpath="${hadoop.classpath}:./src/hipi.jar">
         <compilerarg value="-Xlint:deprecation" />
      </javac>
    <!-- Create the jar -->
    
    <jar destfile="${jardir}/${jarfilename}" basedir="./bin">
	  <zipfileset src="./src/hipi.jar" />
      <manifest>
	    <attribute name="Main-Class" value="${mainclass}" />
      </manifest>
    </jar>
  </target>

  <target name="hibimport">
    <antcall target="compile">
      <param name="srcdir" value="src/hipi/tool" />
      <param name="jarfilename" value="hibimport.jar" />
      <param name="jardir" value="tool" />
      <param name="mainclass" value="hipi.tool.CreateHipiImageBundle" />
    </antcall>
  </target>

  <!-- Create a sequence file from a HIB-->
  <target name="covariance">
    <antcall target="compile">
      <param name="srcdir" value="examples/hipi/examples/covariance" />
      <param name="jarfilename" value="covariance.jar" />
      <param name="jardir" value="examples" />
      <param name="mainclass" value="hipi.examples.covariance.Covariance" />
    </antcall>
  </target>

  <!-- The distributed downloader, which takes a database of URL's and creates a HIB -->
  <target name="downloader">
    <antcall target="compile">
      <param name="srcdir" value="examples/hipi/examples/downloader" />
      <param name="jarfilename" value="downloader.jar" />
      <param name="jardir" value="examples" />
      <param name="mainclass" value="hipi.examples.downloader.Downloader" />
    </antcall>
  </target>

  <!-- Extract jpeg images from a HIB into a folder -->
  <target name="jpegfromhib">
    <antcall target="compile">
      <param name="srcdir" value="examples/hipi/examples/jpegfromhib" />
      <param name="jarfilename" value="jpegfromhib.jar" />
      <param name="jardir" value="examples" />
      <param name="mainclass" value="hipi.examples.jpegfromhib.JpegFromHib" />
    </antcall>
  </target>

  <target name="createsequencefile">
    <antcall target="compile">
      <param name="srcdir" value="examples/hipi/examples/createsequencefile" />
      <param name="jarfilename" value="createsequencefile.jar" />
      <param name="jardir" value="examples" />
      <param name="mainclass" value="hipi.examples.createsequencefile.CreateSequenceFile" />
    </antcall>
  </target>

  <!-- Dump some information about all of the information in a HIB -->
  <target name="dumphib">
    <antcall target="compile">
      <param name="srcdir" value="examples/hipi/examples/dumphib" />
      <param name="jarfilename" value="dumphib.jar" />
      <param name="jardir" value="examples" />
      <param name="mainclass" value="hipi.examples.dumphib.DumpHib" />
    </antcall>
  </target>

  <target name="test" depends="setup, test_settings">
    <javac includeantruntime="false" fork="true" srcdir="src/hipi/unittest" destdir="lib/hipi/unittest" classpath="${hadoop.classpath}:./src/hipi.jar:./3rdparty/junit-4.12.jar:./3rdparty/hamcrest-core-1.3.jar" debug="on"></javac>
    <java fork="true" classname="org.junit.runner.JUnitCore" classpath="${hadoop.classpath}:${hamcrest.jar}:${junit.jar}:${commons.logging.jar}:${guava.jar}:${commons.collections.jar}:${commons.configuration.jar}:${commons.lang.jar}:${hadoop.auth.jar}:${slf4j.api.jar}:${log4j.jar}:${metadata.jar}:${avro.jar}:./src/hipi.jar:./lib">
       <arg value="hipi.unittest.AllTests"/>
     </java>
  </target>

  <target name="all" depends="hibimport, covariance, downloader, jpegfromhib, createsequencefile, dumphib" />

  <!-- Clean -->
  <target name="clean">    
    <delete dir="bin" />
    <delete>
      <fileset dir="." includes="examples/*.jar,experiments/*.jar" />
    </delete>
  </target>


</project>
